Content of directory:

	original_10iter - Default 10 iter run with patch applied to fix the NAN number issue listed on cumf_als github.  Copy files in folder directly into cumf_als directory.

	original_5000iter - 5000 iter run  with patch applied to fix the NAN number issue listed on cumf_als github.  Copy files in folder directly into cumf_als directory.

	corrections - Fixes to cumf_als to fix performance problems from the sequence specified in SC paper. Copy files in folder directly into cumf_als directory.

	diogenes_datafiles - Data files generated by Diogenes for the original SC 2019 run (original driver). These are included such that someone can view the results without having to install Diogenes (which is a pain to do currently) and without having to do a full run with Diogenes (potentially greater than 6 hours of runtime). See readme in foled to view run.

How to apply patches to cumf_als:
	
	1. copy files from original_10iter or original_5000iter into the base directory for cumf_als.
	2. run to get baseline.
	3. copy files from corrections into cumf_als
	4. run to get corrected values

Run Command: <DIRECTORY REDACTED>/apps/cumf_als/main 71567 65133 100 9000048 1000006 0.05 1 1 <DIRECTORY REDACTED>/apps/cumf_als/data/ml10M/ 

As part of allowing for better reproducibility, I have rerun both the corrected and original versions of cumf_als to make availible a complete program output. These tests were run on Ray (LLNL, Power 8 CORAL Machine) on 09/30/2019.

NOTE: Program outputs are taken from runs taken after the SC 2019 publication of Diogenes with an updated GPU driver. Due to the driver change, execution time of the original and fixed version are faster in total execution time in comparison to the SC 2019 publication, resulting in the % of execution time number reported by Diogenes differing by 4% from the SC paper (actual fix is 12% vs 8% improvement in the SC paper). However when viewed in seconds of estimated improvement, the results are still 95% accurate (137s estimated benefit vs 131s actual). In the near future, new Diogenes datafiles will be generated on this new driver version that should more closely match the output here. 

CUMF_ALS (5000 iter, SC Paper Settings)

Original Times (with fix to NAN issue specified in cumf_als wiki):
	Full Output output_original_5000iters.txt

	doALS takes seconds: 1166.296 for F = 100

Corrected Times:

	Full Output in output_fixed_5000iters.txt

	doALS takes seconds: 1023.740 for F = 100


CUMF_ALS (10 iter, non-SC paper run)

Original times (with fix to NAN issue specified in cumf_als wiki):

	M = 71567, N = 65133, F = 100, NNZ = 9000048, NNZ_TEST = 1000006, lambda = 0.050000
	X_BATCH = 1, THETA_BATCH = 1
	DATA_DIR = <DIRECTORY TREE REDACTED>/apps/cumf_als/data/ml10M/ 
	*******start loading training and testing sets to host.
	*******parameters: m: 71567, n:  65133, f: 100, nnz: 9000048 
	*******start allocating memory on GPU...
	*******start copying memory to GPU...
	*******start iterations...
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 0: 1.504892
	--------- Test RMSE in iter 0: 1.386075
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 1: 3.581383
	--------- Test RMSE in iter 1: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 2: 3.581383
	--------- Test RMSE in iter 2: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 3: 3.581383
	--------- Test RMSE in iter 3: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 4: 3.581383
	--------- Test RMSE in iter 4: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 5: 3.581383
	--------- Test RMSE in iter 5: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 6: 3.581383
	--------- Test RMSE in iter 6: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 7: 3.581383
	--------- Test RMSE in iter 7: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 8: 3.581383
	--------- Test RMSE in iter 8: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 9: 3.581383
	--------- Test RMSE in iter 9: 3.581651

	doALS takes seconds: 3.033 for F = 100

Corrected Time:

	M = 71567, N = 65133, F = 100, NNZ = 9000048, NNZ_TEST = 1000006, lambda = 0.050000
	X_BATCH = 1, THETA_BATCH = 1
	DATA_DIR = <DIRECTORY TREE REDACTED>/apps/cumf_als/data/ml10M/ 
	*******start loading training and testing sets to host.
	*******parameters: m: 71567, n:  65133, f: 100, nnz: 9000048 
	*******start allocating memory on GPU...
	*******start copying memory to GPU...
	Allocating to id 99 of size 36000192
	Allocating to id 100 of size 36000192
	*******start iterations...
	Allocating to id 0 of size 28626800
		CG solver with fp32.
	Allocating to id 12345 of size 26053200
	Allocating to id 1 of size 26053200
		CG solver with fp32.
	--------- Train RMSE in iter 0: 1.504893
	--------- Test RMSE in iter 0: 1.386075
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 1: 3.581383
	--------- Test RMSE in iter 1: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 2: 3.581383
	--------- Test RMSE in iter 2: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 3: 3.581383
	--------- Test RMSE in iter 3: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 4: 3.581383
	--------- Test RMSE in iter 4: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 5: 3.581383
	--------- Test RMSE in iter 5: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 6: 3.581383
	--------- Test RMSE in iter 6: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 7: 3.581383
	--------- Test RMSE in iter 7: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 8: 3.581383
	--------- Test RMSE in iter 8: 3.581651
		CG solver with fp32.
		CG solver with fp32.
	--------- Train RMSE in iter 9: 3.581383
	--------- Test RMSE in iter 9: 3.581651

	doALS takes seconds: 2.749 for F = 100

