#pragma once
#include <string.h>
#include <algorithm>
#include <functional>
#include <array>
#include <iostream>
#include <cassert>
#include <deque>
#include <sys/time.h>
#include <cstdlib>
#include <sstream>
#include <tuple>
#include <utility> 
#include <stdarg.h>
#include <map>
#include <set> 
#include <iomanip>
#include <string>
#include <sys/types.h>
#include <unistd.h>
#include <mutex>
#include <fstream>
#include <boost/program_options.hpp>
#include "DyninstProcess.h"
#include "PerformanceModel.h"
#include "StackPoint.h"
#include "StackStorage.h"
#include "APICaptureInstrimentation.h"
#include "StacktraceSynchronizations.h"
#include "ReadStackKeys.h"
#include "TimerInstrimentation.h"
#include "LoadStoreInstrimentation.h"
#include "TimeUse.h"
#include "FixCudaFree.h"
#include "MemRecorder.h"
#include "FixCudaProblems.h"
#include "CallTransformation.h"

#define DIOGENES_OUTPUT_FILELIST "@CMAKE_INSTALL_PREFIX@/lib/OutputFiles.txt"
#define DRIVER_LIBRARY "@CMAKE_INSTALL_PREFIX@/lib/libDriverAPIWrapper.so"
#define PLUGIN_LIST {"@CMAKE_INSTALL_PREFIX@/lib/plugins/libCUPTIEventHandler.so","@CMAKE_INSTALL_PREFIX@/lib/plugins/libTimeCall.so","@CMAKE_INSTALL_PREFIX@/lib/plugins/libSynchTool.so","@CMAKE_INSTALL_PREFIX@/lib/plugins/libDriverAPITrace.so", "@CMAKE_INSTALL_PREFIX@/lib/plugins/libTimeFirstUse.so", "@CMAKE_INSTALL_PREFIX@/lib/plugins/libDataTransfer.so", "@CMAKE_INSTALL_PREFIX@/lib/plugins/libDataSyncTimer.so"};
#define WRAPPER_DEF "@CMAKE_INSTALL_PREFIX@/defs/DriverAPIWrapper.def"
#define INTERNAL_SYNC "0x2B7E28"
class SyncTesting {
public:
	SyncTesting(boost::program_options::variables_map vm);
	void Run();
//	void HandleBreakpoint(ProcessController * p);
	void RunWithCUPTI();
	void GatherSynchronizationDelay();
	void CreatePluginFile(std::vector<std::string> plugins);
	void CreateFunctionTimers(std::vector<std::string> functions);
	void GatherSynchronizationCalls();
	void ReadSynchronizationCalls();
	void ReadDefinition(std::string WrapperDef);
	void InstrumentProgram();
	void RunWithLoadStoreAnalysis();
	void ReprocessModel();
	void CaptureDriverCalls();
	void DecodeStack(std::string infile, std::string outfile);
	void CaptureDuplicateTransfers();
	void TimeTransfers();
	void CopyOldFiles();
	void RunWithoutInstrimentation();
	void RunWithSyncStacktracing(StackRecMap & recs);
	std::shared_ptr<DyninstProcess> LaunchApplication(bool debug);
	void TimeSynchronizations(StackRecMap & recs);
	void RunLoadStoreAnalysis(StackRecMap & recs, std::vector<StackPoint> & uses);
	void RunTimeUse(StackRecMap & recs, std::vector<StackPoint> & uses);
	void FixProblems(StackRecMap & recs);
	CallTransPtr MemRecorderLaunch(StackRecMap & recs);
	void FixKnownProblems(StackRecMap & recs);
	void RunAutoCorrect();
	std::shared_ptr<DyninstProcess> LaunchApplicationByName(std::string name, bool debug);
	void IndentifySyncFunction();
private:
	std::set<std::string> _syncCalls; 
	std::vector<std::tuple<std::string, std::string, std::string, std::string, std::string> > _wrapperDefFunctions;
	boost::program_options::variables_map _vm;
	std::string _programName;
	std::set<StackPoint> _stackKeys;
	PerformanceModel _model;
	std::map<std::string, uint64_t> _storedStacks;
};
