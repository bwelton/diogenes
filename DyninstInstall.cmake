cmake_minimum_required (VERSION 2.8.11)
## Building Dynisnt 

## Dyninst libraries we need to link against
set(DYNINST_LIBRARY_COMMON  -lcommon)
set(DYNINST_LIBRARY_DYNC  -ldynC_API)
set(DYNINST_LIBRARY_DWARF  -ldynDwarf)
set(DYNINST_LIBRARY_ELF  -ldynElf)
set(DYNINST_LIBRARY_API_RT  -ldyninstAPI_RT)
set(DYNINST_LIBRARY_API  -ldyninstAPI)
set(DYNINST_LIBRARY_INSTAPI  -linstructionAPI)
set(DYNINST_LIBRARY_PARSE  -lparseAPI)
set(DYNINST_LIBRARY_PATCH  -lpatchAPI)
set(DYNINST_LIBRARY_PCONTROL  -lpcontrol)
set(DYNINST_LIBRARY_STACKWALK  -lstackwalk)
set(DYNINST_LIBRARY_SYMLITE  -lsymLite)
set(DYNINST_LIBRARY_SYMTAB  -lsymtabAPI)
set(DYNINST_VERSION "HEAD")


## Check if the machine is ORNL Titan
## If it is, we must select a specific version of dyninst

if ("${BUILD_HOST}" MATCHES "(titan-ext)[1-7]" AND NOT "${SPACK_INSTALL}" MATCHES "yes")
	## We are on titan, use the following version of dyninst
	message(INFO " We detected that we are on ORNL Titan, Using Dyninst REV a8252fd")
	set(DYNINST_VERSION "a8252fd9ace7dd837f98b0db750c588560feea95")
endif("${BUILD_HOST}" MATCHES "(titan-ext)[1-7]" AND NOT "${SPACK_INSTALL}" MATCHES "yes")

if (DEFINED CRAY_MACHINE)
	if (NOT DEFINED LIBELF_LIBFILE)
		set(LIBELF_LIBFILE "$ENV{LIBELF_DIR}/lib/libelf.so")
		set(LIBELF_INCLUDE "$ENV{LIBELF_DIR}/include")
	endif(NOT DEFINED LIBELF_LIBFILE)
	if (NOT DEFINED LIBDWARF_LIBFILE)
		set(LIBDWARF_LIBFILE "$ENV{LIBDWARF_DIR}/lib/libdwarf.so")
		set(LIBDWARF_INCLUDE "$ENV{LIBDWARF_DIR}/include")
	endif(NOT DEFINED LIBDWARF_LIBFILE)
endif(DEFINED CRAY_MACHINE)

if (NOT DEFINED LIBELF_LIBFILE)
	message(ERROR " LIBELF_LIBFILE is not set, set -DLIBELF_LIBFILE=<full path to libelf.so>")
endif(NOT DEFINED LIBELF_LIBFILE)

if (NOT DEFINED LIBELF_INCLUDE)
	message(ERROR " LIBELF_INCLUDE is not set, set -DLIBELF_INCLUDE=<directory of libelf inc>")
endif(NOT DEFINED LIBELF_INCLUDE)

if (NOT DEFINED LIBDWARF_LIBFILE)
	message(ERROR " LIBDWARF_LIBFILE is not set, set -DLIBDWARF_LIBFILE=<full path to libdwarf.so>")
endif(NOT DEFINED LIBDWARF_LIBFILE)

if (NOT DEFINED LIBDWARF_INCLUDE)
	message(ERROR " LIBDWARF_INCLUDE is not set, set -DLIBDWARF_INCLUDE=<directory of libdwarf inc>")
endif(NOT DEFINED LIBDWARF_INCLUDE)

## Check if existing dyninst install was passed
if (NOT DEFINED DYNINST_ROOT)
	message(INFO " DYNINST_ROOT not set, compiling dyninst from source")
	ExternalProject_Add(
  		dyninst
  		GIT_REPOSITORY "https://github.com/dyninst/dyninst.git"
  		GIT_TAG "${DYNINST_VERSION}"
  		SOURCE_DIR "${PROJECT_BINARY_DIR}/3rdparty/dyninst"
  		CMAKE_ARGS -DBOOST_ROOT=${BOOST_ROOT} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} -DLIBELF_LIBRARIES=${LIBELF_LIBFILE} -DLIBELF_INCLUDE_DIR=${LIBELF_INCLUDE} -DLIBDWARF_LIBRARIES=${LIBDWARF_LIBFILE} -DLIBDWARF_INCLUDE_DIR=${LIBDWARF_INCLUDE} -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
  		INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
		BUILD_COMMAND $(MAKE) -j 16
  		UPDATE_COMMAND ""
	)
	set(DYNINST_ROOT "${CMAKE_INSTALL_PREFIX}")
else (NOT DEFINED DYNINST_ROOT)
	add_custom_target(dyninst)
endif(NOT DEFINED DYNINST_ROOT)
get_filename_component(LIBELF_DIR "${LIBELF_LIBFILE}" DIRECTORY)
get_filename_component(LIBDWARF_DIR "${LIBDWARF_LIBFILE}" DIRECTORY)
set(DYNINST_LIBRARY_DIR "-L${DYNINST_ROOT}/lib")
set(DYNINST_LIBRARIES "${DYNINST_LIBRARY_DIR} ${DYNINST_LIBRARY_COMMON} ${DYNINST_LIBRARY_DYNC} ${DYNINST_LIBRARY_DWARF} ${DYNINST_LIBRARY_ELF} ${DYNINST_LIBRARY_API_RT} ${DYNINST_LIBRARY_API} ${DYNINST_LIBRARY_INSTAPI} ${DYNINST_LIBRARY_PARSE} ${DYNINST_LIBRARY_PATCH} ${DYNINST_LIBRARY_PCONTROL} ${DYNINST_LIBRARY_STACKWALK} ${DYNINST_LIBRARY_SYMLITE} ${DYNINST_LIBRARY_SYMTAB}")
set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--as-needed")
INCLUDE_DIRECTORIES("${DYNINST_ROOT}/include")